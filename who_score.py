# -*- coding: utf-8 -*-
"""WHO_Score.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P9U2HrQVGiENp1OtRmXt_l8WqE1yAU8k
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install tableone

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import pandas as pd
from google.colab import files
from google.colab import auth
auth.authenticate_user()
print('Authenticated')

# %load_ext google.colab.data_table

# Commented out IPython magic to ensure Python compatibility.
# change this to change the right project
# %env GOOGLE_CLOUD_PROJECT = sccm-datathon-2023-participant

# Commented out IPython magic to ensure Python compatibility.
# # example MIMIC-IV table 1 code here
# %%bigquery core4 --project sccm-datathon-2023-participant
# SELECT * FROM `sccm-discovery.VIRUS.coredata4` adm

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery VIRUS_demographics --project sccm-datathon-2023-participant
# SELECT * FROM `sccm-discovery.VIRUS.coredata1_2` adm

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery core7 --project sccm-datathon-2023-participant
# SELECT * FROM `sccm-discovery.VIRUS.coredata7` adm

core4=pd.DataFrame(core4)
core7=pd.DataFrame(core7)
core4.drop(columns='oxygenation_methods_2___0', inplace=True)
core4.drop(columns='oxygenation_methods_2___4', inplace=True)
core4.drop(columns='oxygenation_methods_2___7', inplace=True)
core4.drop(columns='oxygenation_methods_2___2', inplace=True)
core4.drop(columns='oxygenation_methods_2___1', inplace=True)
core4.drop(columns='oxygenation_methods_2___6', inplace=True)

VIRUS_demographics=pd.DataFrame(VIRUS_demographics)
core4 = core4.drop_duplicates(subset='icu_id', keep='first')
VIRUS_demographics = pd.merge(VIRUS_demographics, core4, on='icu_id', how='left')
VIRUS_demographics = pd.merge(VIRUS_demographics, core7, on='icu_id', how='left')



len(VIRUS_demographics)

VIRUS_demographics['sex'] = VIRUS_demographics['sex'].replace(1.0, 'Male')
VIRUS_demographics['sex'] = VIRUS_demographics['sex'].replace(2.0, 'Female')
VIRUS_demographics['sex'] = VIRUS_demographics['sex'].replace(3.0, 'Intersex')
VIRUS_demographics['sex'] = VIRUS_demographics['sex'].replace(4.0, 'Transgender')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(1.0, 'Other')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(2.0, 'Other')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(3.0, 'Black')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(4.0, 'Other')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(5.0, 'White')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(6.0, 'Other')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(7.0, 'Other')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(8.0, 'Other')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(9.0, 'Other')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(10.0, 'Other')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(11.0, 'Other')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(12.0, 'Other')
VIRUS_demographics['race'] = VIRUS_demographics['race'].replace(12.0, 'Other')

VIRUS_demographics['ethnic_group'] = VIRUS_demographics['ethnic_group'].replace(1.0, 'Hispanic')
VIRUS_demographics['ethnic_group'] = VIRUS_demographics['ethnic_group'].replace(0.0, 'Non-Hispanic')
VIRUS_demographics['ethnic_group'] = VIRUS_demographics['ethnic_group'].replace(2.0, 'Non-Hispanic')
VIRUS_demographics['ethnic_group'] = VIRUS_demographics['ethnic_group'].replace(3.0, 'Non-Hispanic')

VIRUS_demographics=pd.DataFrame(VIRUS_demographics)

VIRUS_demographics['oxygenation_methods_2___0'].unique()

VIRUS_demographics['WHOscore3']= ((VIRUS_demographics['oxygenation___9'] | (VIRUS_demographics['oxygenation_methods_2___0'])|VIRUS_demographics['icu_level_care___0']))

VIRUS_demographics['WHOscore4']= ((VIRUS_demographics['oxygenation___4'] | (VIRUS_demographics['oxygenation___5'])|VIRUS_demographics['oxygenation___6']|VIRUS_demographics['oxygenation_methods_2___4']|VIRUS_demographics['oxygenation_methods_2___7']))

VIRUS_demographics['WHOscore5']= ( (VIRUS_demographics['oxygenation___1'])|VIRUS_demographics['oxygenation___3']|VIRUS_demographics['oxygenation_methods_2___2']|VIRUS_demographics['oxygenation_methods_2___7'])

VIRUS_demographics['WHOscore6']= ((VIRUS_demographics['oxygenation___2'] | (VIRUS_demographics['oxygenation_methods_2___1'])|VIRUS_demographics['icu_level_care___4']))

VIRUS_demographics['icu_level_care___3'].unique()





VIRUS_demographics['WHOscore7']= ((VIRUS_demographics['oxygenation_methods_2___6'])|
                                   (VIRUS_demographics['icu_level_care___4'] & VIRUS_demographics['icu_level_care___3'])|
                                    (VIRUS_demographics['icu_level_care___4'] & VIRUS_demographics['icu_level_care___2'])|
                                     (VIRUS_demographics['icu_level_care___4'] & VIRUS_demographics['icu_level_care___6'])|
                                       (VIRUS_demographics['icu_level_care___4'] & VIRUS_demographics['icu_level_care___9']))

VIRUS_demographics['WHOscore8']=VIRUS_demographics['icu_level_care___1']

cols=['icu_id','sex','bmi_value','WHO_Region','race','age','ethnic_group','day_prior_covid19_symptoms','days_prior_covid_testing','WHOscore3','WHOscore4','WHOscore5','WHOscore6','WHOscore7','WHOscore8']

newDF=VIRUS_demographics[cols]

newDF=newDF[VIRUS_demographics['days_prior_covid_testing']>0]

newDF=newDF[newDF['days_prior_covid_testing']<15]

newDF=newDF[newDF['day_prior_covid19_symptoms']<15]
newDF=newDF[newDF['day_prior_covid19_symptoms']>0]

newDF.head()

from google.colab import files

csv_filename = 'WHOscoresID.csv'
newDF.to_csv(csv_filename, index=False)
files.download(csv_filename)

newDF=VIRUS_demographics[cols]

len(newDF)

len(newDF)

len(newDF)

import pandas as pd
import matplotlib.pyplot as plt

# Create a box plot
plt.figure(figsize=(8, 6))
plt.boxplot(VIRUS_demographics['days_prior_covid_testing'].dropna())
#also day_prior_covid19_symptoms
plt.xlabel('Box Plot for day_prior_covid19_symptoms')
plt.title('Days')
plt.ylim(-10, 20)
plt.show()

newDF['days_prior_covid_testing'].plot.kde()

# Set plot labels and title
plt.xlabel('days_prior_covid_testing')
plt.ylabel('Density')
plt.title('Kernel Density Estimation (KDE) Plot')
plt.savefig('kde.png',dpi=300)

from google.colab import files

# Download the PNG file
files.download('kde.png')

df=tableone.tableone(
    VIRUS_demographics,
    columns = [
        'sex',
        'bmi_value',
        'WHO_Region',
        'race',
        'age',
        'ethnic_group',
        ],
    categorical = [
        'sex',
        'race',
        'WHO_Region',
        'ethnic_group',

        ],
    groupby=[
        'day_prior_covid19_symptoms', #
        ]
)

df

import pandas as pd
from tableone import TableOne
import matplotlib.pyplot as plt

# Assuming 'data' is your dataset with the variables you want to compare
# Replace 'variable_name' with the actual column name containing the variable of interest
variable_name = 'race'

# Create the TableOne object
tab = TableOne(VIRUS_demographics, columns=[variable_name, 'day_prior_covid19_symptoms'])

# Generate the table
table = tab.tableone

# Access the summary statistics
summary_stats = tab._columns_summary

# Extract the min and max values
min_val = summary_stats.loc[variable_name, 'min']
max_val = summary_stats.loc[variable_name, 'max']

# Create the boxplot using matplotlib
plt.figure(figsize=(8, 6))  # Optional: Adjust the figure size
plt.boxplot(data[variable_name], notch=True, vert=False)
plt.xlabel('Values')  # Replace 'Values' with the appropriate label for your variable
plt.title('Boxplot of ' + variable_name)  # Replace 'Boxplot of' with your desired title

# Add min and max values to the plot
plt.scatter([min_val, max_val], [1, 1], marker='o', color='red', label='Min/Max')
plt.legend()

plt.show()

df.head(

)





def downloadTable(df,name):
  html_content = df.to_html()

# Save the HTML content to a file
  with open(name, "w") as f:
    f.write(html_content)

# Download the HTML file
  files.download(name)

downloadTable(df,"day_prior_covid19_symptoms.html")

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery virus_demographics  --project sccm-datathon-2023-participant
# 
# SELECT cd12.*
#   , cd7.hosp_status
# 
# FROM `sccm-discovery.VIRUS.coredata1_2` cd12
# LEFT JOIN `sccm-discovery.VIRUS.coredata7` cd7 on (
#   cd7.icu_id = cd12.icu_id
# 
# )
#

virus_demographics['sex'] = virus_demographics['sex'].replace(1.0, 'Male')
virus_demographics['sex'] = virus_demographics['sex'].replace(2.0, 'Female')
virus_demographics['sex'] = virus_demographics['sex'].replace(3.0, 'Intersex')
virus_demographics['sex'] = virus_demographics['sex'].replace(4.0, 'Transgender')
virus_demographics['race'] = virus_demographics['race'].replace(1.0, 'Other')
virus_demographics['race'] = virus_demographics['race'].replace(2.0, 'Other')
virus_demographics['race'] = virus_demographics['race'].replace(3.0, 'Black')
virus_demographics['race'] = virus_demographics['race'].replace(4.0, 'Other')
virus_demographics['race'] = virus_demographics['race'].replace(5.0, 'White')
virus_demographics['race'] = virus_demographics['race'].replace(6.0, 'Other')
virus_demographics['race'] = virus_demographics['race'].replace(7.0, 'Other')
virus_demographics['race'] = virus_demographics['race'].replace(8.0, 'Other')
virus_demographics['race'] = virus_demographics['race'].replace(9.0, 'Other')
virus_demographics['race'] = virus_demographics['race'].replace(10.0, 'Other')
virus_demographics['race'] = virus_demographics['race'].replace(11.0, 'Other')
virus_demographics['race'] = virus_demographics['race'].replace(12.0, 'Other')
virus_demographics['race'] = virus_demographics['race'].replace(12.0, 'Other')

virus_demographics['ethnic_group'] = virus_demographics['ethnic_group'].replace(1.0, 'Hispanic')
virus_demographics['ethnic_group'] = virus_demographics['ethnic_group'].replace(0.0, 'Non-Hispanic')
virus_demographics['ethnic_group'] = virus_demographics['ethnic_group'].replace(2.0, 'Non-Hispanic')
virus_demographics['ethnic_group'] = virus_demographics['ethnic_group'].replace(3.0, 'Non-Hispanic')
virus_demographics['hosp_status'] = virus_demographics['hosp_status'].replace(0.0, 'Alive')
virus_demographics['hosp_status'] = virus_demographics['hosp_status'].replace(1.0, 'Deceased')

df=tableone.tableone(
    virus_demographics,
    columns = [
        'age', 'sex',
        'bmi_value',
        'race',
        'ethnic_group',
        'hosp_status',
        ],
    categorical = [
        'sex',
        'race',
        'ethnic_group',
        'hosp_status',
        ],
    groupby =[

    ]

)
df

downloadTable(df,"day_prior_covid19_symptoms.html")







